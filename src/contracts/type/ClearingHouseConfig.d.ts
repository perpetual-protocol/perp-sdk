/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ClearingHouseConfigInterface extends ethers.utils.Interface {
  functions: {
    "candidate()": FunctionFragment;
    "getImRatio()": FunctionFragment;
    "getLiquidationPenaltyRatio()": FunctionFragment;
    "getMaxFundingRate()": FunctionFragment;
    "getMaxMarketsPerAccount()": FunctionFragment;
    "getMmRatio()": FunctionFragment;
    "getPartialCloseRatio()": FunctionFragment;
    "getSettlementTokenBalanceCap()": FunctionFragment;
    "getTwapInterval()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isBackstopLiquidityProvider(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBackstopLiquidityProvider(address,bool)": FunctionFragment;
    "setLiquidationPenaltyRatio(uint24)": FunctionFragment;
    "setMaxFundingRate(uint24)": FunctionFragment;
    "setMaxMarketsPerAccount(uint8)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPartialCloseRatio(uint24)": FunctionFragment;
    "setSettlementTokenBalanceCap(uint256)": FunctionFragment;
    "setTwapInterval(uint32)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPenaltyRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMarketsPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMmRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPartialCloseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementTokenBalanceCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTwapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBackstopLiquidityProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBackstopLiquidityProvider",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationPenaltyRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxFundingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMarketsPerAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPartialCloseRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementTokenBalanceCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getImRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPenaltyRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMarketsPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMmRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartialCloseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementTokenBalanceCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBackstopLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackstopLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationPenaltyRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMarketsPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPartialCloseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementTokenBalanceCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "BackstopLiquidityProviderChanged(address,bool)": EventFragment;
    "LiquidationPenaltyRatioChanged(uint24)": EventFragment;
    "MaxFundingRateChanged(uint24)": EventFragment;
    "MaxMarketsPerAccountChanged(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PartialCloseRatioChanged(uint24)": EventFragment;
    "SettlementTokenBalanceCapChanged(uint256)": EventFragment;
    "TwapIntervalChanged(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BackstopLiquidityProviderChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationPenaltyRatioChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxFundingRateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxMarketsPerAccountChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartialCloseRatioChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettlementTokenBalanceCapChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TwapIntervalChanged"): EventFragment;
}

export class ClearingHouseConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClearingHouseConfigInterface;

  functions: {
    candidate(overrides?: CallOverrides): Promise<[string]>;

    getImRatio(overrides?: CallOverrides): Promise<[number]>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<[number]>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<[number]>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<[number]>;

    getMmRatio(overrides?: CallOverrides): Promise<[number]>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<[number]>;

    getSettlementTokenBalanceCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTwapInterval(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationPenaltyRatio(
      liquidationPenaltyRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxFundingRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxMarketsPerAccount(
      maxMarketsPerAccountArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPartialCloseRatio(
      partialCloseRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettlementTokenBalanceCap(
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwapInterval(
      twapIntervalArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  candidate(overrides?: CallOverrides): Promise<string>;

  getImRatio(overrides?: CallOverrides): Promise<number>;

  getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<number>;

  getMaxFundingRate(overrides?: CallOverrides): Promise<number>;

  getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<number>;

  getMmRatio(overrides?: CallOverrides): Promise<number>;

  getPartialCloseRatio(overrides?: CallOverrides): Promise<number>;

  getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

  getTwapInterval(overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBackstopLiquidityProvider(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackstopLiquidityProvider(
    account: string,
    isProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationPenaltyRatio(
    liquidationPenaltyRatioArg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxFundingRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxMarketsPerAccount(
    maxMarketsPerAccountArg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPartialCloseRatio(
    partialCloseRatioArg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettlementTokenBalanceCap(
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwapInterval(
    twapIntervalArg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    candidate(overrides?: CallOverrides): Promise<string>;

    getImRatio(overrides?: CallOverrides): Promise<number>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<number>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<number>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<number>;

    getMmRatio(overrides?: CallOverrides): Promise<number>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<number>;

    getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapInterval(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationPenaltyRatio(
      liquidationPenaltyRatioArg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxFundingRate(
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMarketsPerAccount(
      maxMarketsPerAccountArg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setPartialCloseRatio(
      partialCloseRatioArg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementTokenBalanceCap(
      cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapInterval(
      twapIntervalArg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    BackstopLiquidityProviderChanged(
      account?: string | null,
      isProvider?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isProvider: boolean }
    >;

    LiquidationPenaltyRatioChanged(
      liquidationPenaltyRatio?: null
    ): TypedEventFilter<[number], { liquidationPenaltyRatio: number }>;

    MaxFundingRateChanged(
      rate?: null
    ): TypedEventFilter<[number], { rate: number }>;

    MaxMarketsPerAccountChanged(
      maxMarketsPerAccount?: null
    ): TypedEventFilter<[number], { maxMarketsPerAccount: number }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PartialCloseRatioChanged(
      partialCloseRatio?: null
    ): TypedEventFilter<[number], { partialCloseRatio: number }>;

    SettlementTokenBalanceCapChanged(
      cap?: null
    ): TypedEventFilter<[BigNumber], { cap: BigNumber }>;

    TwapIntervalChanged(
      twapInterval?: null
    ): TypedEventFilter<[BigNumber], { twapInterval: BigNumber }>;
  };

  estimateGas: {
    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    getImRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getMmRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationPenaltyRatio(
      liquidationPenaltyRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxFundingRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxMarketsPerAccount(
      maxMarketsPerAccountArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPartialCloseRatio(
      partialCloseRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettlementTokenBalanceCap(
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwapInterval(
      twapIntervalArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationPenaltyRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxMarketsPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMmRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPartialCloseRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementTokenBalanceCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackstopLiquidityProvider(
      account: string,
      isProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationPenaltyRatio(
      liquidationPenaltyRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxFundingRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMarketsPerAccount(
      maxMarketsPerAccountArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPartialCloseRatio(
      partialCloseRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettlementTokenBalanceCap(
      cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwapInterval(
      twapIntervalArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

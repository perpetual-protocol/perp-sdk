/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IClearingHouseConfigInterface extends ethers.utils.Interface {
  functions: {
    "getImRatio()": FunctionFragment;
    "getLiquidationPenaltyRatio()": FunctionFragment;
    "getMaxFundingRate()": FunctionFragment;
    "getMaxMarketsPerAccount()": FunctionFragment;
    "getMmRatio()": FunctionFragment;
    "getPartialCloseRatio()": FunctionFragment;
    "getSettlementTokenBalanceCap()": FunctionFragment;
    "getTwapInterval()": FunctionFragment;
    "isBackstopLiquidityProvider(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getImRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPenaltyRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMarketsPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMmRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPartialCloseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementTokenBalanceCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTwapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBackstopLiquidityProvider",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getImRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPenaltyRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMarketsPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMmRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartialCloseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementTokenBalanceCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBackstopLiquidityProvider",
    data: BytesLike
  ): Result;

  events: {};
}

export class IClearingHouseConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IClearingHouseConfigInterface;

  functions: {
    getImRatio(overrides?: CallOverrides): Promise<[number]>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<[number]>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<[number]>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<[number]>;

    getMmRatio(overrides?: CallOverrides): Promise<[number]>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<[number]>;

    getSettlementTokenBalanceCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTwapInterval(overrides?: CallOverrides): Promise<[number]>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getImRatio(overrides?: CallOverrides): Promise<number>;

  getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<number>;

  getMaxFundingRate(overrides?: CallOverrides): Promise<number>;

  getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<number>;

  getMmRatio(overrides?: CallOverrides): Promise<number>;

  getPartialCloseRatio(overrides?: CallOverrides): Promise<number>;

  getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

  getTwapInterval(overrides?: CallOverrides): Promise<number>;

  isBackstopLiquidityProvider(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getImRatio(overrides?: CallOverrides): Promise<number>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<number>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<number>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<number>;

    getMmRatio(overrides?: CallOverrides): Promise<number>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<number>;

    getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapInterval(overrides?: CallOverrides): Promise<number>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getImRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getMmRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getImRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationPenaltyRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxMarketsPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMmRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPartialCloseRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementTokenBalanceCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBackstopLiquidityProvider(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

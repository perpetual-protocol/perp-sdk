/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IClearingHouseInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(tuple)": FunctionFragment;
    "cancelAllExcessOrders(address,address)": FunctionFragment;
    "cancelExcessOrders(address,address,bytes32[])": FunctionFragment;
    "closePosition(tuple)": FunctionFragment;
    "getAccountBalance()": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "getVault()": FunctionFragment;
    "liquidate(address,address,uint256)": FunctionFragment;
    "openPosition(tuple)": FunctionFragment;
    "removeLiquidity(tuple)": FunctionFragment;
    "settleAllFunding(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllExcessOrders",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExcessOrders",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAllFunding",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExcessOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAllFunding",
    data: BytesLike
  ): Result;

  events: {
    "FundingPaymentSettled(address,address,int256)": EventFragment;
    "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)": EventFragment;
    "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)": EventFragment;
    "PositionLiquidated(address,address,uint256,uint256,uint256,address)": EventFragment;
    "ReferredPositionChanged(bytes32)": EventFragment;
    "TrustedForwarderChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundingPaymentSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferredPositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
}

export class IClearingHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IClearingHouseInterface;

  functions: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getInsuranceFund(overrides?: CallOverrides): Promise<[string]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getQuoteToken(overrides?: CallOverrides): Promise<[string]>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAllFunding(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    params: {
      baseToken: string;
      base: BigNumberish;
      quote: BigNumberish;
      lowerTick: BigNumberish;
      upperTick: BigNumberish;
      minBase: BigNumberish;
      minQuote: BigNumberish;
      useTakerBalance: boolean;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAllExcessOrders(
    maker: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelExcessOrders(
    maker: string,
    baseToken: string,
    orderIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    params: {
      baseToken: string;
      sqrtPriceLimitX96: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAccountValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "liquidate(address,address,uint256)"(
    trader: string,
    baseToken: string,
    oppositeAmountBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    params: {
      baseToken: string;
      isBaseToQuote: boolean;
      isExactInput: boolean;
      amount: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    params: {
      baseToken: string;
      lowerTick: BigNumberish;
      upperTick: BigNumberish;
      liquidity: BigNumberish;
      minBase: BigNumberish;
      minQuote: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAllFunding(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        base: BigNumber;
        quote: BigNumber;
        fee: BigNumber;
        liquidity: BigNumber;
      }
    >;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        base: BigNumber;
        quote: BigNumber;
        isPartialClose: boolean;
      }
    >;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { base: BigNumber; quote: BigNumber }>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        base: BigNumber;
        quote: BigNumber;
        fee: BigNumber;
      }
    >;

    settleAllFunding(trader: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    FundingPaymentSettled(
      trader?: string | null,
      baseToken?: string | null,
      fundingPayment?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { trader: string; baseToken: string; fundingPayment: BigNumber }
    >;

    LiquidityChanged(
      maker?: string | null,
      baseToken?: string | null,
      quoteToken?: string | null,
      lowerTick?: null,
      upperTick?: null,
      base?: null,
      quote?: null,
      liquidity?: null,
      quoteFee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        maker: string;
        baseToken: string;
        quoteToken: string;
        lowerTick: number;
        upperTick: number;
        base: BigNumber;
        quote: BigNumber;
        liquidity: BigNumber;
        quoteFee: BigNumber;
      }
    >;

    PositionChanged(
      trader?: string | null,
      baseToken?: string | null,
      exchangedPositionSize?: null,
      exchangedPositionNotional?: null,
      fee?: null,
      openNotional?: null,
      realizedPnl?: null,
      sqrtPriceAfterX96?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string;
        baseToken: string;
        exchangedPositionSize: BigNumber;
        exchangedPositionNotional: BigNumber;
        fee: BigNumber;
        openNotional: BigNumber;
        realizedPnl: BigNumber;
        sqrtPriceAfterX96: BigNumber;
      }
    >;

    PositionLiquidated(
      trader?: string | null,
      baseToken?: string | null,
      positionNotional?: null,
      positionSize?: null,
      liquidationFee?: null,
      liquidator?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        trader: string;
        baseToken: string;
        positionNotional: BigNumber;
        positionSize: BigNumber;
        liquidationFee: BigNumber;
        liquidator: string;
      }
    >;

    ReferredPositionChanged(
      referralCode?: BytesLike | null
    ): TypedEventFilter<[string], { referralCode: string }>;

    TrustedForwarderChanged(
      forwarder?: string | null
    ): TypedEventFilter<[string], { forwarder: string }>;
  };

  estimateGas: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAllFunding(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllExcessOrders(
      maker: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelExcessOrders(
      maker: string,
      baseToken: string,
      orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidate(address,address,uint256)"(
      trader: string,
      baseToken: string,
      oppositeAmountBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAllFunding(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

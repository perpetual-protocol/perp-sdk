/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addPool(address,uint24)": FunctionFragment;
    "candidate()": FunctionFragment;
    "getClearingHouse()": FunctionFragment;
    "getFeeRatio(address)": FunctionFragment;
    "getInsuranceFundFeeRatio(address)": FunctionFragment;
    "getMarketInfo(address)": FunctionFragment;
    "getMaxOrdersPerMarket()": FunctionFragment;
    "getPool(address)": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "hasPool(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setClearingHouse(address)": FunctionFragment;
    "setFeeRatio(address,uint24)": FunctionFragment;
    "setInsuranceFundFeeRatio(address,uint24)": FunctionFragment;
    "setMaxOrdersPerMarket(uint8)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFeeRatio", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFundFeeRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxOrdersPerMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClearingHouse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceFundFeeRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxOrdersPerMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFundFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxOrdersPerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceFundFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxOrdersPerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "ClearingHouseChanged(address)": EventFragment;
    "FeeRatioChanged(address,uint24)": EventFragment;
    "InsuranceFundFeeRatioChanged(uint24)": EventFragment;
    "MaxOrdersPerMarketChanged(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolAdded(address,uint24,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearingHouseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRatioChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InsuranceFundFeeRatioChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxOrdersPerMarketChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
}

export class MarketRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketRegistryInterface;

  functions: {
    addPool(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    getClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    getFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, number] & {
          pool: string;
          exchangeFeeRatio: number;
          uniswapFeeRatio: number;
          insuranceFundFeeRatio: number;
        }
      ]
    >;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<[number]>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<[string]>;

    getQuoteToken(overrides?: CallOverrides): Promise<[string]>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;

    hasPool(baseToken: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      uniswapV3FactoryArg: string,
      quoteTokenArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRatio(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsuranceFundFeeRatio(
      baseToken: string,
      insuranceFundFeeRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPool(
    baseToken: string,
    feeRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  getClearingHouse(overrides?: CallOverrides): Promise<string>;

  getFeeRatio(baseToken: string, overrides?: CallOverrides): Promise<number>;

  getInsuranceFundFeeRatio(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getMarketInfo(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      pool: string;
      exchangeFeeRatio: number;
      uniswapFeeRatio: number;
      insuranceFundFeeRatio: number;
    }
  >;

  getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<number>;

  getPool(baseToken: string, overrides?: CallOverrides): Promise<string>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  hasPool(baseToken: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    uniswapV3FactoryArg: string,
    quoteTokenArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClearingHouse(
    clearingHouseArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRatio(
    baseToken: string,
    feeRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsuranceFundFeeRatio(
    baseToken: string,
    insuranceFundFeeRatioArg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxOrdersPerMarket(
    maxOrdersPerMarketArg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    candidate(overrides?: CallOverrides): Promise<string>;

    getClearingHouse(overrides?: CallOverrides): Promise<string>;

    getFeeRatio(baseToken: string, overrides?: CallOverrides): Promise<number>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        pool: string;
        exchangeFeeRatio: number;
        uniswapFeeRatio: number;
        insuranceFundFeeRatio: number;
      }
    >;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<number>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<string>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    hasPool(baseToken: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      uniswapV3FactoryArg: string,
      quoteTokenArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRatio(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInsuranceFundFeeRatio(
      baseToken: string,
      insuranceFundFeeRatioArg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ClearingHouseChanged(
      clearingHouse?: string | null
    ): TypedEventFilter<[string], { clearingHouse: string }>;

    FeeRatioChanged(
      baseToken?: null,
      feeRatio?: null
    ): TypedEventFilter<
      [string, number],
      { baseToken: string; feeRatio: number }
    >;

    InsuranceFundFeeRatioChanged(
      feeRatio?: null
    ): TypedEventFilter<[number], { feeRatio: number }>;

    MaxOrdersPerMarketChanged(
      maxOrdersPerMarket?: null
    ): TypedEventFilter<[number], { maxOrdersPerMarket: number }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PoolAdded(
      baseToken?: string | null,
      feeRatio?: BigNumberish | null,
      pool?: string | null
    ): TypedEventFilter<
      [string, number, string],
      { baseToken: string; feeRatio: number; pool: string }
    >;
  };

  estimateGas: {
    addPool(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    hasPool(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      uniswapV3FactoryArg: string,
      quoteTokenArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRatio(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsuranceFundFeeRatio(
      baseToken: string,
      insuranceFundFeeRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxOrdersPerMarket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPool(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      uniswapV3FactoryArg: string,
      quoteTokenArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRatio(
      baseToken: string,
      feeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceFundFeeRatio(
      baseToken: string,
      insuranceFundFeeRatioArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxOrdersPerMarket(
      maxOrdersPerMarketArg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DelegatableVaultInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(tuple)": FunctionFragment;
    "aggregate(bytes[])": FunctionFragment;
    "candidate()": FunctionFragment;
    "claimWeek(address,uint256,uint256,bytes32[])": FunctionFragment;
    "claimWeeks(address,tuple[])": FunctionFragment;
    "closePosition(tuple)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "openPosition(tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidity(tuple)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardContractAddressMap(address)": FunctionFragment;
    "setFundManager(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRewardContractAddress(address,bool)": FunctionFragment;
    "setWhiteFunction(bytes4,bool)": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "whiteFunctionMap(bytes4)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimWeek",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWeeks",
    values: [
      string,
      { week: BigNumberish; balance: BigNumberish; merkleProof: BytesLike[] }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [
      {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardContractAddressMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardContractAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteFunction",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteFunctionMap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimWeek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimWeeks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardContractAddressMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteFunctionMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class DelegatableVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelegatableVaultInterface;

  functions: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aggregate(
      calls: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    claimWeek(
      rewardContractAddr: string,
      week: BigNumberish,
      claimedBalance: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWeeks(
      rewardContractAddr: string,
      claims: {
        week: BigNumberish;
        balance: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      clearingHouseArg: string,
      fundOwnerArg: string,
      fundManagerArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardContractAddressMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setFundManager(
      fundManagerArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardContractAddress(
      rewardContractAddress: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhiteFunction(
      functionSelector: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteFunctionMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    params: {
      baseToken: string;
      base: BigNumberish;
      quote: BigNumberish;
      lowerTick: BigNumberish;
      upperTick: BigNumberish;
      minBase: BigNumberish;
      minQuote: BigNumberish;
      useTakerBalance: boolean;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aggregate(
    calls: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  claimWeek(
    rewardContractAddr: string,
    week: BigNumberish,
    claimedBalance: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWeeks(
    rewardContractAddr: string,
    claims: {
      week: BigNumberish;
      balance: BigNumberish;
      merkleProof: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    params: {
      baseToken: string;
      sqrtPriceLimitX96: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    amountX10_D: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    clearingHouseArg: string,
    fundOwnerArg: string,
    fundManagerArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    params: {
      baseToken: string;
      isBaseToQuote: boolean;
      isExactInput: boolean;
      amount: BigNumberish;
      oppositeAmountBound: BigNumberish;
      deadline: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      referralCode: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    params: {
      baseToken: string;
      lowerTick: BigNumberish;
      upperTick: BigNumberish;
      liquidity: BigNumberish;
      minBase: BigNumberish;
      minQuote: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardContractAddressMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setFundManager(
    fundManagerArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardContractAddress(
    rewardContractAddress: string,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhiteFunction(
    functionSelector: BytesLike,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteFunctionMap(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    token: string,
    amountX10_D: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        base: BigNumber;
        quote: BigNumber;
        fee: BigNumber;
        liquidity: BigNumber;
      }
    >;

    aggregate(
      calls: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    candidate(overrides?: CallOverrides): Promise<string>;

    claimWeek(
      rewardContractAddr: string,
      week: BigNumberish,
      claimedBalance: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimWeeks(
      rewardContractAddr: string,
      claims: {
        week: BigNumberish;
        balance: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        deltaAvailableBase: BigNumber;
        deltaAvailableQuote: BigNumber;
      }
    >;

    deposit(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      clearingHouseArg: string,
      fundOwnerArg: string,
      fundManagerArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { deltaBase: BigNumber; deltaQuote: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        base: BigNumber;
        quote: BigNumber;
        fee: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardContractAddressMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFundManager(
      fundManagerArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setRewardContractAddress(
      rewardContractAddress: string,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhiteFunction(
      functionSelector: BytesLike,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    whiteFunctionMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aggregate(
      calls: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    claimWeek(
      rewardContractAddr: string,
      week: BigNumberish,
      claimedBalance: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWeeks(
      rewardContractAddr: string,
      claims: {
        week: BigNumberish;
        balance: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      clearingHouseArg: string,
      fundOwnerArg: string,
      fundManagerArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardContractAddressMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFundManager(
      fundManagerArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardContractAddress(
      rewardContractAddress: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhiteFunction(
      functionSelector: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteFunctionMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: {
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        useTakerBalance: boolean;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aggregate(
      calls: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimWeek(
      rewardContractAddr: string,
      week: BigNumberish,
      claimedBalance: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWeeks(
      rewardContractAddr: string,
      claims: {
        week: BigNumberish;
        balance: BigNumberish;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      params: {
        baseToken: string;
        sqrtPriceLimitX96: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      clearingHouseArg: string,
      fundOwnerArg: string,
      fundManagerArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      params: {
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        amount: BigNumberish;
        oppositeAmountBound: BigNumberish;
        deadline: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        referralCode: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: {
        baseToken: string;
        lowerTick: BigNumberish;
        upperTick: BigNumberish;
        liquidity: BigNumberish;
        minBase: BigNumberish;
        minQuote: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardContractAddressMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFundManager(
      fundManagerArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardContractAddress(
      rewardContractAddress: string,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteFunction(
      functionSelector: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteFunctionMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amountX10_D: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

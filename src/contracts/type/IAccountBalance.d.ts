/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IAccountBalanceInterface extends ethers.utils.Interface {
  functions: {
    "deregisterBaseToken(address,address)": FunctionFragment;
    "getAccountInfo(address,address)": FunctionFragment;
    "getBase(address,address)": FunctionFragment;
    "getBaseTokens(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getMarginRequirementForLiquidation(address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPnlAndPendingFee(address)": FunctionFragment;
    "getQuote(address,address)": FunctionFragment;
    "getTakerOpenNotional(address,address)": FunctionFragment;
    "getTakerPositionSize(address,address)": FunctionFragment;
    "getTotalAbsPositionValue(address)": FunctionFragment;
    "getTotalDebtValue(address)": FunctionFragment;
    "getTotalOpenNotional(address,address)": FunctionFragment;
    "getTotalPositionSize(address,address)": FunctionFragment;
    "getTotalPositionValue(address,address)": FunctionFragment;
    "getVault()": FunctionFragment;
    "hasOrder(address)": FunctionFragment;
    "modifyOwedRealizedPnl(address,int256)": FunctionFragment;
    "modifyTakerBalance(address,address,int256,int256)": FunctionFragment;
    "registerBaseToken(address,address)": FunctionFragment;
    "settleBalanceAndDeregister(address,address,int256,int256,int256,int256)": FunctionFragment;
    "settleOwedRealizedPnl(address)": FunctionFragment;
    "settleQuoteToOwedRealizedPnl(address,address,int256)": FunctionFragment;
    "updateTwPremiumGrowthGlobal(address,address,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deregisterBaseToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBase",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRequirementForLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlAndPendingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAbsPositionValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionValue",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasOrder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "modifyOwedRealizedPnl",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyTakerBalance",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBaseToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalanceAndDeregister",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOwedRealizedPnl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleQuoteToOwedRealizedPnl",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTwPremiumGrowthGlobal",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deregisterBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRequirementForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTakerOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakerPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAbsPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyTakerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBalanceAndDeregister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleQuoteToOwedRealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTwPremiumGrowthGlobal",
    data: BytesLike
  ): Result;

  events: {
    "PnlRealized(address,int256)": EventFragment;
    "VaultChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PnlRealized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultChanged"): EventFragment;
}

export class IAccountBalance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAccountBalanceInterface;

  functions: {
    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          takerPositionSize: BigNumber;
          takerOpenNotional: BigNumber;
          lastTwPremiumGrowthGlobalX96: BigNumber;
        }
      ]
    >;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        owedRealizedPnl: BigNumber;
        unrealizedPnl: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<[boolean]>;

    modifyOwedRealizedPnl(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyTakerBalance(
      trader: string,
      baseToken: string,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      takerBase: BigNumberish,
      takerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleQuoteToOwedRealizedPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deregisterBaseToken(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountInfo(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      takerPositionSize: BigNumber;
      takerOpenNotional: BigNumber;
      lastTwPremiumGrowthGlobalX96: BigNumber;
    }
  >;

  getBase(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getMarginRequirementForLiquidation(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPnlAndPendingFee(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      owedRealizedPnl: BigNumber;
      unrealizedPnl: BigNumber;
      pendingFee: BigNumber;
    }
  >;

  getQuote(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAbsPositionValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebtValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionValue(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  hasOrder(trader: string, overrides?: CallOverrides): Promise<boolean>;

  modifyOwedRealizedPnl(
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyTakerBalance(
    trader: string,
    baseToken: string,
    base: BigNumberish,
    quote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerBaseToken(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBalanceAndDeregister(
    maker: string,
    baseToken: string,
    takerBase: BigNumberish,
    takerQuote: BigNumberish,
    realizedPnl: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleOwedRealizedPnl(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleQuoteToOwedRealizedPnl(
    trader: string,
    baseToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTwPremiumGrowthGlobal(
    trader: string,
    baseToken: string,
    lastTwPremiumGrowthGlobalX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        takerPositionSize: BigNumber;
        takerOpenNotional: BigNumber;
        lastTwPremiumGrowthGlobalX96: BigNumber;
      }
    >;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        owedRealizedPnl: BigNumber;
        unrealizedPnl: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<boolean>;

    modifyOwedRealizedPnl(
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyTakerBalance(
      trader: string,
      baseToken: string,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      takerBase: BigNumberish,
      takerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleQuoteToOwedRealizedPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PnlRealized(
      trader?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; amount: BigNumber }
    >;

    VaultChanged(
      vault?: string | null
    ): TypedEventFilter<[string], { vault: string }>;
  };

  estimateGas: {
    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    hasOrder(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    modifyOwedRealizedPnl(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyTakerBalance(
      trader: string,
      baseToken: string,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      takerBase: BigNumberish,
      takerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleQuoteToOwedRealizedPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deregisterBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasOrder(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyOwedRealizedPnl(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyTakerBalance(
      trader: string,
      baseToken: string,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerBaseToken(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBalanceAndDeregister(
      maker: string,
      baseToken: string,
      takerBase: BigNumberish,
      takerQuote: BigNumberish,
      realizedPnl: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleOwedRealizedPnl(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleQuoteToOwedRealizedPnl(
      trader: string,
      baseToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTwPremiumGrowthGlobal(
      trader: string,
      baseToken: string,
      lastTwPremiumGrowthGlobalX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

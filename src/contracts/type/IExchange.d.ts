/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IExchangeInterface extends ethers.utils.Interface {
  functions: {
    "getAccountBalance()": FunctionFragment;
    "getAllPendingFundingPayment(address)": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getMaxTickCrossedWithinBlock(address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPendingFundingPayment(address,address)": FunctionFragment;
    "getPnlToBeRealized(tuple)": FunctionFragment;
    "getSqrtMarkTwapX96(address,uint32)": FunctionFragment;
    "settleFunding(address,address)": FunctionFragment;
    "swap(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPendingFundingPayment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTickCrossedWithinBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFundingPayment",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlToBeRealized",
    values: [
      {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSqrtMarkTwapX96",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleFunding",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      {
        trader: string;
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        isClose: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTickCrossedWithinBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlToBeRealized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSqrtMarkTwapX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "AccountBalanceChanged(address)": EventFragment;
    "FundingUpdated(address,uint256,uint256)": EventFragment;
    "MaxTickCrossedWithinBlockChanged(address,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxTickCrossedWithinBlockChanged"
  ): EventFragment;
}

export class IExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExchangeInterface;

  functions: {
    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settleFunding(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      params: {
        trader: string;
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        isClose: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAllPendingFundingPayment(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getMaxTickCrossedWithinBlock(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPendingFundingPayment(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPnlToBeRealized(
    params: {
      trader: string;
      baseToken: string;
      base: BigNumberish;
      quote: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSqrtMarkTwapX96(
    baseToken: string,
    twapInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settleFunding(
    trader: string,
    baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    params: {
      trader: string;
      baseToken: string;
      isBaseToQuote: boolean;
      isExactInput: boolean;
      isClose: boolean;
      amount: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleFunding(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber] & {
          twPremiumX96: BigNumber;
          twPremiumDivBySqrtPriceX96: BigNumber;
        }
      ] & {
        fundingPayment: BigNumber;
        fundingGrowthGlobal: [BigNumber, BigNumber] & {
          twPremiumX96: BigNumber;
          twPremiumDivBySqrtPriceX96: BigNumber;
        };
      }
    >;

    swap(
      params: {
        trader: string;
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        isClose: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        base: BigNumber;
        quote: BigNumber;
        exchangedPositionSize: BigNumber;
        exchangedPositionNotional: BigNumber;
        fee: BigNumber;
        insuranceFundFee: BigNumber;
        pnlToBeRealized: BigNumber;
        sqrtPriceAfterX96: BigNumber;
        tick: number;
        isPartialClose: boolean;
      }
    >;
  };

  filters: {
    AccountBalanceChanged(
      accountBalance?: null
    ): TypedEventFilter<[string], { accountBalance: string }>;

    FundingUpdated(
      baseToken?: string | null,
      markTwap?: null,
      indexTwap?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { baseToken: string; markTwap: BigNumber; indexTwap: BigNumber }
    >;

    MaxTickCrossedWithinBlockChanged(
      baseToken?: string | null,
      maxTickCrossedWithinBlock?: null
    ): TypedEventFilter<
      [string, number],
      { baseToken: string; maxTickCrossedWithinBlock: number }
    >;
  };

  estimateGas: {
    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleFunding(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      params: {
        trader: string;
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        isClose: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleFunding(
      trader: string,
      baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      params: {
        trader: string;
        baseToken: string;
        isBaseToQuote: boolean;
        isExactInput: boolean;
        isClose: boolean;
        amount: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

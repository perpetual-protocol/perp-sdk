/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PerpPortalInterface extends ethers.utils.Interface {
  functions: {
    "getAccountBalance()": FunctionFragment;
    "getAccountInfo(address,address)": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getAllPendingFundingPayment(address)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getBase(address,address)": FunctionFragment;
    "getBaseTokens(address)": FunctionFragment;
    "getClearingHouse()": FunctionFragment;
    "getClearingHouseConfig()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getFeeRatio(address)": FunctionFragment;
    "getFreeCollateral(address)": FunctionFragment;
    "getFreeCollateralByRatio(address,uint24)": FunctionFragment;
    "getImRatio()": FunctionFragment;
    "getInsuranceFund()": FunctionFragment;
    "getInsuranceFundFeeRatio(address)": FunctionFragment;
    "getLiquidationPenaltyRatio()": FunctionFragment;
    "getLiquidationPrice(address,address)": FunctionFragment;
    "getLiquidityCoefficientInFundingPayment(address,address,tuple)": FunctionFragment;
    "getMarginRequirementForLiquidation(address)": FunctionFragment;
    "getMarketInfo(address)": FunctionFragment;
    "getMarketRegistry()": FunctionFragment;
    "getMaxFundingRate()": FunctionFragment;
    "getMaxMarketsPerAccount()": FunctionFragment;
    "getMaxOrdersPerMarket()": FunctionFragment;
    "getMaxTickCrossedWithinBlock(address)": FunctionFragment;
    "getMmRatio()": FunctionFragment;
    "getOpenOrder(address,address,int24,int24)": FunctionFragment;
    "getOpenOrderById(bytes32)": FunctionFragment;
    "getOpenOrderIds(address,address)": FunctionFragment;
    "getOrderBook()": FunctionFragment;
    "getPartialCloseRatio()": FunctionFragment;
    "getPendingFee(address,address,int24,int24)": FunctionFragment;
    "getPendingFundingPayment(address,address)": FunctionFragment;
    "getPnlAndPendingFee(address)": FunctionFragment;
    "getPnlToBeRealized(tuple)": FunctionFragment;
    "getPool(address)": FunctionFragment;
    "getQuote(address,address)": FunctionFragment;
    "getQuoteToken()": FunctionFragment;
    "getSettlementToken()": FunctionFragment;
    "getSettlementTokenBalanceCap()": FunctionFragment;
    "getSqrtMarkTwapX96(address,uint32)": FunctionFragment;
    "getTakerOpenNotional(address,address)": FunctionFragment;
    "getTakerPositionSize(address,address)": FunctionFragment;
    "getTotalAbsPositionValue(address)": FunctionFragment;
    "getTotalDebt()": FunctionFragment;
    "getTotalDebtValue(address)": FunctionFragment;
    "getTotalOpenNotional(address,address)": FunctionFragment;
    "getTotalOrderDebt(address,address,bool)": FunctionFragment;
    "getTotalPositionSize(address,address)": FunctionFragment;
    "getTotalPositionValue(address,address)": FunctionFragment;
    "getTotalQuoteBalanceAndPendingFee(address,address[])": FunctionFragment;
    "getTotalTokenAmountInPoolAndPendingFee(address,address,bool)": FunctionFragment;
    "getTwapInterval()": FunctionFragment;
    "getUniswapV3Factory()": FunctionFragment;
    "getVault()": FunctionFragment;
    "hasOrder(address,address[])": FunctionFragment;
    "hasPool(address)": FunctionFragment;
    "updateOrderDebt(bytes32,int256,int256)": FunctionFragment;
    "vaultDecimals()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPendingFundingPayment",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBase",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFeeRatio", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeCollateralByRatio",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getImRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFundFeeRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPenaltyRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityCoefficientInFundingPayment",
    values: [
      string,
      string,
      { twPremiumX96: BigNumberish; twPremiumDivBySqrtPriceX96: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRequirementForLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMarketsPerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxOrdersPerMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTickCrossedWithinBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMmRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrderById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrderIds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPartialCloseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFee",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFundingPayment",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlAndPendingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPnlToBeRealized",
    values: [
      {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementTokenBalanceCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSqrtMarkTwapX96",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAbsPositionValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOpenNotional",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOrderDebt",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionSize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPositionValue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalQuoteBalanceAndPendingFee",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenAmountInPoolAndPendingFee",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTwapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasOrder",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "hasPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateOrderDebt",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDecimals",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeCollateralByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getImRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFundFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPenaltyRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityCoefficientInFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRequirementForLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMarketsPerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxOrdersPerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTickCrossedWithinBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMmRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrderById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPartialCloseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPnlToBeRealized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementTokenBalanceCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSqrtMarkTwapX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakerOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTakerPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAbsPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOpenNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOrderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalQuoteBalanceAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenAmountInPoolAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultDecimals",
    data: BytesLike
  ): Result;

  events: {};
}

export class PerpPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpPortalInterface;

  functions: {
    getAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          takerPositionSize: BigNumber;
          takerOpenNotional: BigNumber;
          lastTwPremiumGrowthGlobalX96: BigNumber;
        }
      ]
    >;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getImRatio(overrides?: CallOverrides): Promise<[number]>;

    getInsuranceFund(overrides?: CallOverrides): Promise<[string]>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<[number]>;

    getLiquidationPrice(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: {
        twPremiumX96: BigNumberish;
        twPremiumDivBySqrtPriceX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber] & { liquidityCoefficientInFundingPayment: BigNumber }
    >;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, number] & {
          pool: string;
          exchangeFeeRatio: number;
          uniswapFeeRatio: number;
          insuranceFundFeeRatio: number;
        }
      ]
    >;

    getMarketRegistry(overrides?: CallOverrides): Promise<[string]>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<[number]>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<[number]>;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<[number]>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMmRatio(overrides?: CallOverrides): Promise<[number]>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          liquidity: BigNumber;
          lowerTick: number;
          upperTick: number;
          lastFeeGrowthInsideX128: BigNumber;
          lastTwPremiumGrowthInsideX96: BigNumber;
          lastTwPremiumGrowthBelowX96: BigNumber;
          lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
          baseDebt: BigNumber;
          quoteDebt: BigNumber;
        }
      ]
    >;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          liquidity: BigNumber;
          lowerTick: number;
          upperTick: number;
          lastFeeGrowthInsideX128: BigNumber;
          lastTwPremiumGrowthInsideX96: BigNumber;
          lastTwPremiumGrowthBelowX96: BigNumber;
          lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
          baseDebt: BigNumber;
          quoteDebt: BigNumber;
        }
      ]
    >;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getOrderBook(overrides?: CallOverrides): Promise<[string]>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<[number]>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        owedRealizedPnl: BigNumber;
        unrealizedPnl: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<[string]>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getQuoteToken(overrides?: CallOverrides): Promise<[string]>;

    getSettlementToken(overrides?: CallOverrides): Promise<[string]>;

    getSettlementTokenBalanceCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalQuoteAmountInPools: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTwapInterval(overrides?: CallOverrides): Promise<[number]>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    "hasOrder(address,address[])"(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasOrder(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasPool(baseToken: string, overrides?: CallOverrides): Promise<[boolean]>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultDecimals(overrides?: CallOverrides): Promise<[number]>;
  };

  getAccountBalance(overrides?: CallOverrides): Promise<string>;

  getAccountInfo(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      takerPositionSize: BigNumber;
      takerOpenNotional: BigNumber;
      lastTwPremiumGrowthGlobalX96: BigNumber;
    }
  >;

  getAccountValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllPendingFundingPayment(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getBase(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

  getClearingHouse(overrides?: CallOverrides): Promise<string>;

  getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getFeeRatio(baseToken: string, overrides?: CallOverrides): Promise<number>;

  getFreeCollateral(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreeCollateralByRatio(
    trader: string,
    ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getImRatio(overrides?: CallOverrides): Promise<number>;

  getInsuranceFund(overrides?: CallOverrides): Promise<string>;

  getInsuranceFundFeeRatio(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<number>;

  getLiquidationPrice(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidityCoefficientInFundingPayment(
    trader: string,
    baseToken: string,
    fundingGrowthGlobal: {
      twPremiumX96: BigNumberish;
      twPremiumDivBySqrtPriceX96: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarginRequirementForLiquidation(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketInfo(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      pool: string;
      exchangeFeeRatio: number;
      uniswapFeeRatio: number;
      insuranceFundFeeRatio: number;
    }
  >;

  getMarketRegistry(overrides?: CallOverrides): Promise<string>;

  getMaxFundingRate(overrides?: CallOverrides): Promise<number>;

  getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<number>;

  getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<number>;

  getMaxTickCrossedWithinBlock(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getMmRatio(overrides?: CallOverrides): Promise<number>;

  getOpenOrder(
    trader: string,
    baseToken: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      lowerTick: number;
      upperTick: number;
      lastFeeGrowthInsideX128: BigNumber;
      lastTwPremiumGrowthInsideX96: BigNumber;
      lastTwPremiumGrowthBelowX96: BigNumber;
      lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
      baseDebt: BigNumber;
      quoteDebt: BigNumber;
    }
  >;

  getOpenOrderById(
    orderId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      lowerTick: number;
      upperTick: number;
      lastFeeGrowthInsideX128: BigNumber;
      lastTwPremiumGrowthInsideX96: BigNumber;
      lastTwPremiumGrowthBelowX96: BigNumber;
      lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
      baseDebt: BigNumber;
      quoteDebt: BigNumber;
    }
  >;

  getOpenOrderIds(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOrderBook(overrides?: CallOverrides): Promise<string>;

  getPartialCloseRatio(overrides?: CallOverrides): Promise<number>;

  getPendingFee(
    trader: string,
    baseToken: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingFundingPayment(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPnlAndPendingFee(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      owedRealizedPnl: BigNumber;
      unrealizedPnl: BigNumber;
      pendingFee: BigNumber;
    }
  >;

  getPnlToBeRealized(
    params: {
      trader: string;
      baseToken: string;
      base: BigNumberish;
      quote: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPool(baseToken: string, overrides?: CallOverrides): Promise<string>;

  getQuote(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuoteToken(overrides?: CallOverrides): Promise<string>;

  getSettlementToken(overrides?: CallOverrides): Promise<string>;

  getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

  getSqrtMarkTwapX96(
    baseToken: string,
    twapInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTakerPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAbsPositionValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDebtValue(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOpenNotional(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOrderDebt(
    trader: string,
    baseToken: string,
    fetchBase: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionSize(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalPositionValue(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalQuoteBalanceAndPendingFee(
    trader: string,
    baseTokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalQuoteAmountInPools: BigNumber;
      totalPendingFee: BigNumber;
    }
  >;

  getTotalTokenAmountInPoolAndPendingFee(
    trader: string,
    baseToken: string,
    fetchBase: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmount: BigNumber;
      totalPendingFee: BigNumber;
    }
  >;

  getTwapInterval(overrides?: CallOverrides): Promise<number>;

  getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  "hasOrder(address,address[])"(
    trader: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasOrder(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPool(baseToken: string, overrides?: CallOverrides): Promise<boolean>;

  updateOrderDebt(
    orderId: BytesLike,
    base: BigNumberish,
    quote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultDecimals(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    getAccountBalance(overrides?: CallOverrides): Promise<string>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        takerPositionSize: BigNumber;
        takerOpenNotional: BigNumber;
        lastTwPremiumGrowthGlobalX96: BigNumber;
      }
    >;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(trader: string, overrides?: CallOverrides): Promise<string[]>;

    getClearingHouse(overrides?: CallOverrides): Promise<string>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getFeeRatio(baseToken: string, overrides?: CallOverrides): Promise<number>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImRatio(overrides?: CallOverrides): Promise<number>;

    getInsuranceFund(overrides?: CallOverrides): Promise<string>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<number>;

    getLiquidationPrice(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: {
        twPremiumX96: BigNumberish;
        twPremiumDivBySqrtPriceX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        pool: string;
        exchangeFeeRatio: number;
        uniswapFeeRatio: number;
        insuranceFundFeeRatio: number;
      }
    >;

    getMarketRegistry(overrides?: CallOverrides): Promise<string>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<number>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<number>;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<number>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getMmRatio(overrides?: CallOverrides): Promise<number>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        lowerTick: number;
        upperTick: number;
        lastFeeGrowthInsideX128: BigNumber;
        lastTwPremiumGrowthInsideX96: BigNumber;
        lastTwPremiumGrowthBelowX96: BigNumber;
        lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
        baseDebt: BigNumber;
        quoteDebt: BigNumber;
      }
    >;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        lowerTick: number;
        upperTick: number;
        lastFeeGrowthInsideX128: BigNumber;
        lastTwPremiumGrowthInsideX96: BigNumber;
        lastTwPremiumGrowthBelowX96: BigNumber;
        lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
        baseDebt: BigNumber;
        quoteDebt: BigNumber;
      }
    >;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOrderBook(overrides?: CallOverrides): Promise<string>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<number>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        owedRealizedPnl: BigNumber;
        unrealizedPnl: BigNumber;
        pendingFee: BigNumber;
      }
    >;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<string>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<string>;

    getSettlementToken(overrides?: CallOverrides): Promise<string>;

    getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalQuoteAmountInPools: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTwapInterval(overrides?: CallOverrides): Promise<number>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    "hasOrder(address,address[])"(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasOrder(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPool(baseToken: string, overrides?: CallOverrides): Promise<boolean>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultDecimals(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    getAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationPenaltyRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationPrice(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: {
        twPremiumX96: BigNumberish;
        twPremiumDivBySqrtPriceX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxMarketsPerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxOrdersPerMarket(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMmRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBook(overrides?: CallOverrides): Promise<BigNumber>;

    getPartialCloseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementTokenBalanceCap(overrides?: CallOverrides): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    "hasOrder(address,address[])"(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasOrder(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPool(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultDecimals(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountInfo(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBase(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokens(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateral(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeCollateralByRatio(
      trader: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInsuranceFundFeeRatio(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPenaltyRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationPrice(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: {
        twPremiumX96: BigNumberish;
        twPremiumDivBySqrtPriceX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRequirementForLiquidation(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfo(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxFundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxMarketsPerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxOrdersPerMarket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMmRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPartialCloseRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnlAndPendingFee(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPnlToBeRealized(
      params: {
        trader: string;
        baseToken: string;
        base: BigNumberish;
        quote: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuote(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlementToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementTokenBalanceCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAbsPositionValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebtValue(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOpenNotional(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionSize(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPositionValue(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV3Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasOrder(address,address[])"(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasOrder(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPool(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
